package com.kjpar0317.batch.config;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.SecurityWebFiltersOrder;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.web.server.SecurityWebFilterChain;
import org.springframework.security.web.server.context.NoOpServerSecurityContextRepository;

import reactor.core.publisher.Mono;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {
	private final ApplicationContext applicationContext;
	
	// ReactiveSecurityConfig.class
	@Bean
	@DependsOn({ "methodSecurityExpressionHandler" })
	public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http, JwtTokenProvider jwtTokenProvider,
			ReactiveAuthenticationManager reactiveAuthenticationManager) {
		DefaultMethodSecurityExpressionHandler defaultWebSecurityExpressionHandler = this.applicationContext
				.getBean(DefaultMethodSecurityExpressionHandler.class);
		defaultWebSecurityExpressionHandler.setPermissionEvaluator(myPermissionEvaluator());
		
		return http.exceptionHandling(
				exceptionHandlingSpec -> exceptionHandlingSpec.authenticationEntryPoint((exchange, ex) -> {
					return Mono.fromRunnable(() -> {
						exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
					});
				}).accessDeniedHandler((exchange, denied) -> {
					return Mono.fromRunnable(() -> {
						exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
					});
				})).cors().disable().csrf().disable().formLogin().disable().httpBasic().disable()
				.authenticationManager(reactiveAuthenticationManager)
				.securityContextRepository(NoOpServerSecurityContextRepository.getInstance())
				.authorizeExchange(exchange -> exchange.pathMatchers(HttpMethod.OPTIONS).permitAll()
						.pathMatchers("/login").permitAll().anyExchange().authenticated())
				.addFilterAt(new JwtTokenAuthenticationFilter(jwtTokenProvider), SecurityWebFiltersOrder.HTTP_BASIC)
				.build();
	}
}